"use client";
import { useEffect, useState } from "react";
import fetchTenthHotView from "@/firebase/fetchTenthHotData";

/**
 * @description 텍스트 콘텐츠에 따라 스타일이 달라지는 칩 UI 컴포넌트.
 *              주로 상태를 표시하는 데 사용됩니다.
 *
 * @typedef {Object} TChipsProps - Chips 컴포넌트의 props 타입 정의
 * @property {number} [view] - 문서의 view 값
 * @property {string} [subtitle] - 문서의 subtitle 값 (예: "게시일: 2024-01-19 15:26:16")
 *
 * @param {TChipsProps} props - Chips 컴포넌트의 속성들
 * @returns {JSX.Element} 텍스트에 따라 스타일이 변경되는 칩 컴포넌트를 반환
 */

type TChipsProps = { view?: number; subtitle?: string };

function Chips({ view, subtitle }: TChipsProps): JSX.Element {
  const [isHot, setIsHot] = useState(false); // isHot 상태 관리
  const [isNew, setIsNew] = useState(false); // isNew 상태 관리
  const [tenthHotView, setTenthHotView] = useState<number | null>(null); // 10번째 view 값 저장

  useEffect(() => {
    const fetchData = async () => {
      const fetchedTenthHotView = await fetchTenthHotView(); // 10번째 문서의 view 값을 가져옴
      setTenthHotView(fetchedTenthHotView);
    };

    fetchData(); // 컴포넌트가 마운트될 때 데이터를 가져옴
  }, []);

  useEffect(() => {
    // isHot 처리: 10번째 view 값과 비교
    if (tenthHotView !== null && view !== undefined) {
      if (view > tenthHotView && view > 1) {
        setIsHot(true);
      } else {
        setIsHot(false);
      }
    }
  }, [tenthHotView, view]);

  useEffect(() => {
    // isNew 처리: subtitle을 날짜로 변환하고 현재 시간과 비교
    if (subtitle) {
      const regex = /게시일: (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/;
      const match = subtitle.match(regex);
      if (match) {
        let postDate = new Date(match[1]); // subtitle에서 날짜를 추출하여 Date 객체 생성
        let now = new Date(); // 현재 시간
        let diffInHours =
          (now.getTime() - postDate.getTime()) / (1000 * 60 * 60); // 차이를 시간 단위로 계산

        if (diffInHours <= 48) {
          setIsNew(true); // 48시간 이내면 isNew를 true로 설정
        } else {
          setIsNew(false); // 48시간을 넘으면 false
        }
      }
    }
  }, [subtitle]);

  return (
    <>
      {/* HOT 처리 */}
      {isHot && (
        <div
          className={`w-fit rounded-full px-2 py-1 text-[11px] font-semibold text-white ${
            isHot && "bg-system-warning"
          }`}
        >
          HOT
        </div>
      )}

      {/* NEW 처리 */}
      {isNew && (
        <div
          className={`w-fit rounded-full px-2 py-1 text-[11px] font-semibold text-white ${
            isNew && "bg-system-assist"
          }`}
        >
          NEW
        </div>
      )}
    </>
  );
}

export default Chips;
