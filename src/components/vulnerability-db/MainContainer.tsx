"use client";

import { useState } from "react";
import ArticleList from "@/components/vulnerability-db/ArticleList";
import RealTimeTopic from "@/components/vulnerability-db/RealTimeTopic";
import Pagination from "@/components/vulnerability-db/Pagination";
import { useVulnerabilityStore } from "@/store/useVulnerabilityStore";
import { useHotNewStore } from "@/store/useHotNewState";
import { useSearchParams } from "next/navigation";

/**
 * @description `MainContainer` 컴포넌트는 Firestore에서 데이터를 가져와 필터링하고, 페이지네이션을 적용하여 화면에 표시.
 * 상태 변화에 따라 데이터를 `isHot` 또는 `isNew` 기준으로 정렬하고, 검색어를 기준으로 필터링
 *
 * @returns {JSX.Element} 필터링된 데이터와 페이지네이션이 포함된 콘텐츠를 반환
 */
function MainContainer(): JSX.Element {
  const { data } = useVulnerabilityStore();
  const { isHot, isNew } = useHotNewStore();
  const searchParams = useSearchParams();
  const searchQuery = searchParams.get("search") || "";

  // 현재 페이지와 한 페이지당 보여줄 데이터 수 설정
  const [page, setPage] = useState(1);
  const perPage = 5; // 한 페이지당 5개의 데이터

  // 상태에 따라 보여줄 데이터 결정 (isHot, isNew에 따라)
  const hotSortData = [...data].sort((a, b) => b.view - a.view);
  const newSortData = [...data].sort((a, b) => b.subtitle - a.subtitle);
  const currentData = isHot ? hotSortData : newSortData;

  // 검색어에 따라 데이터를 필터링
  const filteredData = currentData.filter((item) =>
    item.title.includes(searchQuery),
  );

  // 총 페이지 수 계산 (필터링된 데이터 기준)
  const totalPage = Math.ceil(filteredData.length / perPage);

  // 현재 페이지에 맞는 데이터를 슬라이싱하여 가져오기
  const paginatedData = filteredData.slice(
    (page - 1) * perPage,
    page * perPage,
  );

  return (
    <>
      <div className="flex h-[1350px] justify-between">
        <ArticleList listData={paginatedData} />
        <RealTimeTopic />
      </div>
      <Pagination
        page={page}
        setPage={setPage}
        limit={perPage}
        totalPage={totalPage}
      />
    </>
  );
}

export default MainContainer;
