"use client";

import Image from "next/image";
import { useState } from "react";
import rightArrow from "/public/images/right-arrow.png";
import Link from "next/link";

/**
 * @description 상위 3개의 취약성 보고서를 보여주는 UI 컴포넌트.
 *              각 보고서는 마우스 호버에 따라 크기가 조절되며, 클릭 시 상세 페이지로 이동합니다.
 *
 * @typedef {Object} TTopThreeData - 각 아이템의 ID, 제목, 날짜를 포함한 데이터 타입 정의
 * @property {number} id - 아이템의 고유 ID
 * @property {string} title - 아이템의 제목
 * @property {string} date - 아이템의 생성 날짜
 *
 * @typedef {Object} BoxState - 컴포넌트의 상태를 정의하는 타입
 * @property {number} id - 현재 활성화된 아이템의 ID
 * @property {boolean} containerState - 컨테이너 전체에 대한 상태 (마우스 호버 여부)
 * @property {boolean} state - 개별 아이템에 대한 상태 (마우스 호버 여부)
 *
 * @returns {JSX.Element} 상위 3개의 아이템을 표시하는 컴포넌트를 반환
 */

export type TTopThreeData = {
  id: number;
  title: string;
  date: string;
};

function TopThreeItem() {
  const [box, setBox] = useState<{
    id: number;
    containerState: boolean;
    state: boolean;
  }>({
    id: 0,
    containerState: false,
    state: false,
  });

  const topThreedata: TTopThreeData[] = [
    {
      id: 0,
      title: "[취약성 경고] Microsoft의 여러 보안 취약점에 대한 CNNVD의 보고서",
      date: "2024.03.08 13:30:24",
    },
    {
      id: 1,
      title: "2023년 12월 CNNVD 호환 서비스 신제품 발표",
      date: "2024.03.08 13:30:24",
    },
    {
      id: 2,
      title:
        "[취약성 보고서] CISCO IOS XE 소프트웨어의 보안 취약점에 대한 CNNVD의 보고서",
      date: "2024.03.08 13:30:24",
    },
  ];

  return (
    <>
      <div
        className="mt-[27px] flex gap-7"
        onMouseEnter={() =>
          setBox((prev) => ({ ...prev, containerState: true }))
        }
        onMouseLeave={() =>
          setBox((prev) => ({ ...prev, containerState: false }))
        }
      >
        {topThreedata?.map((item) => (
          <Link
            href={`/vulnerability-db/${item.id}`}
            key={item.id}
            onMouseEnter={() =>
              setBox((prev) => ({ ...prev, id: item.id, state: true }))
            }
            onMouseLeave={() =>
              setBox((prev) => ({ ...prev, id: item.id, state: false }))
            }
            className={`h-[300px] ${(box.id === item.id && box.state) || (item.id === 0 && !box.containerState) || (!box.state && box.containerState) ? "w-[50%]" : "w-[25%]"} rounded-[20px] ${item.id === 0 ? "bg-[url('/images/db-bg-image-1.png')]" : item.id === 1 ? "bg-[url('/images/db-bg-image-2.png')]" : "bg-[url('/images/db-bg-image-3.png')]"} bg-cover`}
          >
            <div className="to-transparant flex h-full w-full items-end justify-between rounded-[20px] bg-gradient-to-t from-black/70 p-5">
              <div className="flex w-[75%] flex-col gap-2">
                <h1
                  className={`${(box.id === item.id && box.state) || (item.id === 0 && !box.containerState) || (!box.state && box.containerState) ? "text-lg" : "text-[13px]"} font-semibold text-white`}
                >
                  {item.title}
                </h1>
                <p
                  className={`${(box.id === item.id && box.state) || (item.id === 0 && !box.containerState) || (!box.state && box.containerState) ? "text-sm" : "text-[8px]"} text-neutral-50`}
                >
                  {item.date}
                </p>
              </div>
              <button className="flex h-[42px] w-[42px] items-center justify-center rounded-full bg-white/70">
                <Image src={rightArrow} alt="arrow" width={28} height={28} />
              </button>
            </div>
          </Link>
        ))}
      </div>
    </>
  );
}
export default TopThreeItem;
