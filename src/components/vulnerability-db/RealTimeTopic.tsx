"use client";
import { useEffect, useState } from "react";
import fetchRealTimeTopics from "@/firebase/fetchRealTimeTopics";
import { useSearchParams } from "next/navigation";

/**
 * @description 실시간 주제를 보여주는 UI 컴포넌트.
 * 주제 목록은 10개의 항목으로 구성되며, 각 항목은 순위별로 표시됩니다.
 * `RealTimeDataList`의 날짜 정보를 기반으로 기준 시간을 계산하여 화면에 표시합니다.
 *
 * @returns {JSX.Element} 실시간 주제 목록을 표시하는 컴포넌트를 반환합니다.
 */

function RealTimeTopic(): JSX.Element {
  // realTimeDataList를 상태로 관리 (초기값은 빈 배열)
  const searchParams = useSearchParams();
  const searchQuery = searchParams.get("search") || "";
  const [realTimeDataList, setRealTimeDataList] = useState<any[]>([]);

  // 날짜와 시간을 'MM.DD HH:MM' 형식으로 보여주는 함수
  const getFormattedDate = () => {
    let date = new Date();
    let month = String(date.getMonth() + 1).padStart(2, "0");
    let day = String(date.getDate()).padStart(2, "0");
    let hours = String(date.getHours()).padStart(2, "0");
    let minutes = String(date.getMinutes()).padStart(2, "0");
    return `${month}월 ${day}일 ${hours}:${minutes}`;
  };

  // 데이터를 가져오는 함수
  const fetchData = async () => {
    try {
      const data = await fetchRealTimeTopics(); // 데이터를 가져오는 함수
      setRealTimeDataList(data); // 상태 업데이트
    } catch (error) {
      console.error("Failed to fetch real-time topics:", error);
    }
  };

  useEffect(() => {
    fetchData();
  }, [searchQuery]);

  return (
    <div className="flex w-[25%] flex-col gap-4">
      <h1 className="text-lg font-semibold">실시간 Topic</h1>
      <p className="text-sm text-neutral-40">{getFormattedDate()} 기준</p>
      <div className="rounded-lg border border-[#C3C3C3] p-4">
        <ul>
          {realTimeDataList.map((item, index) => (
            <li
              key={index}
              className="border-b border-stroke-10 py-3 text-sm text-neutral-80 first-of-type:font-medium first-of-type:text-primary-500 last-of-type:border-none"
            >
              {index + 1}. {item.content}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

export default RealTimeTopic;
