"use client";

import { useState } from "react";
import Chips from "@/components/vulnerability-db/Chips";
import Image from "next/image";
import pin from "/public/images/pin.png";
import pinActive from "/public/images/pin-active.png";
import shareBox from "/public/images/share-box.png";
import shareBoxActive from "/public/images/share-box-active.png";
import { SimilarDataList } from "./detaildummydata";
import { useParams } from "next/navigation";

/**
 * @description `DetailContent` 컴포넌트는 취약성 뉴스의 세부 정보를 표시하는 UI 컴포넌트입니다.
 * 이 컴포넌트는 사용자가 핀 및 공유 버튼을 사용하여 뉴스 항목을 핀하거나 링크를 공유할 수 있도록 합니다.
 *
 * @returns {JSX.Element} 취약성 뉴스의 제목, 설명 및 핀 및 공유 버튼이 포함된 세부 정보 컴포넌트를 반환합니다.
 */

/**
 * @typedef {Object} TPinState
 * @property {number} id - 핀 상태를 추적할 항목의 고유 ID.
 * @property {boolean} state - 항목이 핀된 상태인지 여부를 나타냅니다.
 */

type TPinState = {
  id: number;
  state: boolean;
};

function DetailContent(): JSX.Element {
  const params = useParams();
  const [isPinned, setIsPinned] = useState<TPinState>({ id: 0, state: false });
  const [isShare, setIsShare] = useState(false);

  const detailData = SimilarDataList.filter(
    (item) => item.id === Number(params.id),
  );

  /**
   * 핀 상태를 토글하는 함수입니다.
   *
   * @param {number} id - 핀 상태를 변경할 항목의 ID.
   */

  const handlePinState = (id: number) => {
    setIsPinned((prev) => ({ id: id, state: !prev.state }));
  };

  /**
   * 링크를 공유하거나 클립보드에 복사하는 함수입니다.
   */

  const handleShareLink = () => {
    const link = location.href;

    if (navigator.share) {
      setIsShare(!isShare);
      navigator.share({ url: link });
    } else {
      setIsShare(!isShare);
      navigator.clipboard.writeText(link);
      alert("링크가 복사되었습니다.");
    }
  };

  return (
    <>
      {detailData.map((item) => {
        // 항목의 description의 특정 문자 패턴을 줄바꿈 문자로 변환합니다.
        const description = item.description
          .replace(/(\u00A0\s?\u00A0|\u00A0)/g, "\n\n")
          .replace(/(?=\d+\.)/g, `\n\n`);

        return (
          <div key={item.id}>
            <div className="flex flex-col gap-3 border-b border-neutral-30 pb-[30px]">
              <div className="flex flex-col gap-3">
                <Chips>HOT</Chips>
                <h1 className="text-[21px]">{item.title}</h1>
              </div>
              <div className="flex justify-between">
                <div className="flex gap-5 text-sm text-neutral-40">
                  <span>취약성 뉴스 세부 정보</span>
                  <span>출시 시간 | {item.date}</span>
                </div>
                <div className="flex gap-5">
                  <button onClick={() => handlePinState(item.id)}>
                    {Number(params.id) === isPinned.id && isPinned.state ? (
                      <Image
                        src={pinActive}
                        width={18}
                        height={18}
                        alt="pin-active"
                      />
                    ) : (
                      <Image src={pin} width={18} height={18} alt="pin" />
                    )}
                  </button>
                  <button onClick={handleShareLink}>
                    {isShare ? (
                      <Image
                        src={shareBoxActive}
                        width={18}
                        height={18}
                        alt="share-active"
                      />
                    ) : (
                      <Image
                        src={shareBox}
                        width={18}
                        height={18}
                        alt="share"
                      />
                    )}
                  </button>
                </div>
              </div>
            </div>
            <div className="border-b border-neutral-30 pb-[30px] pt-[30px]">
              <div className="w-full px-2">
                <div className="whitespace-pre-wrap">{description}</div>
              </div>
            </div>
          </div>
        );
      })}
    </>
  );
}
export default DetailContent;
