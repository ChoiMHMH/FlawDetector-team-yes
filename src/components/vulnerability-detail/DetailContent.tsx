"use client";

import { useState } from "react";
import Chips from "@/components/vulnerability-db/Chips";
import Image from "next/image";
import pin from "/public/images/pin.png";
import pinActive from "/public/images/pin-active.png";
import shareBox from "/public/images/share-box.png";
import shareBoxActive from "/public/images/share-box-active.png";
import { useParams } from "next/navigation";
import { useVulnerabilityStore } from "@/store/useVulnerabilityStore";
import getDetailData from "./getDetailData";

/**
 * @description `DetailContent` 컴포넌트는 취약성 뉴스의 세부 정보를 표시하는 UI 컴포넌트입니다.
 * 이 컴포넌트는 사용자가 핀 및 공유 버튼을 사용하여 뉴스 항목을 핀하거나 링크를 공유할 수 있도록 합니다.
 *
 * @returns {JSX.Element} 취약성 뉴스의 제목, 설명 및 핀 및 공유 버튼이 포함된 세부 정보 컴포넌트를 반환합니다.
 */

/**
 * @typedef {Object} TPinState
 * @property {number} id - 핀 상태를 추적할 항목의 고유 ID.
 * @property {boolean} state - 항목이 핀된 상태인지 여부를 나타냅니다.
 */

type TPinState = {
  id: number;
  state: boolean;
};

function DetailContent() {
  const [isPinned, setIsPinned] = useState<TPinState>({ id: 0, state: false });
  const [isShare, setIsShare] = useState(false);
  const params = useParams();

  const item = getDetailData();
  console.log(item);

  // const detailDataArray = detailData ? [detailData] : [];

  /**
   * 핀 상태를 토글하는 함수입니다.
   *
   * @param {number} id - 핀 상태를 변경할 항목의 ID.
   */

  const handlePinState = (id: number) => {
    setIsPinned((prev) => ({ id: id, state: !prev.state }));
  };

  /**
   * 링크를 공유하거나 클립보드에 복사하는 함수입니다.
   */

  const handleShareLink = () => {
    const link = location.href;

    if (navigator.share) {
      setIsShare(!isShare);
      navigator.share({ url: link });
    } else {
      setIsShare(!isShare);
      navigator.clipboard.writeText(link);
      alert("링크가 복사되었습니다.");
    }
  };

  const extractContentInBrackets = (text: string): string | null => {
    // 정규 표현식: 대괄호 안의 내용을 추출합니다.
    const match = text.match(/\[(.*?)\]/);

    // match 결과가 있으면 첫 번째 캡처 그룹을 반환하고, 없으면 null을 반환합니다.
    return match ? match[1] : null;
  };

  return (
    <>
      <div key={item && item.id}>
        <div className="flex flex-col gap-3 border-b border-neutral-30 pb-[30px]">
          <div className="flex flex-col gap-3">
            <Chips view={item ? item.view : 0} />
            <h1 className="text-[21px]">{item && item.title}</h1>
          </div>
          <div className="flex justify-between">
            <div className="flex text-sm text-neutral-40">
              <span>{item && extractContentInBrackets(item.title)}</span>
              <span>{item && item.subtitle}</span>
            </div>
            <div className="flex gap-5">
              <button onClick={() => handlePinState(Number(params.id))}>
                {Number(params.id) === isPinned.id && isPinned.state ? (
                  <Image
                    src={pinActive}
                    width={18}
                    height={18}
                    alt="pin-active"
                  />
                ) : (
                  <Image src={pin} width={18} height={18} alt="pin" />
                )}
              </button>
              <button onClick={handleShareLink}>
                {isShare ? (
                  <Image
                    src={shareBoxActive}
                    width={18}
                    height={18}
                    alt="share-active"
                  />
                ) : (
                  <Image src={shareBox} width={18} height={18} alt="share" />
                )}
              </button>
            </div>
          </div>
        </div>
        <div className="border-b border-neutral-30 pb-[30px] pt-[30px]">
          <div
            className="w-full px-2"
            dangerouslySetInnerHTML={item && { __html: item.content }}
          />
        </div>
      </div>
    </>
  );
}

export default DetailContent;
