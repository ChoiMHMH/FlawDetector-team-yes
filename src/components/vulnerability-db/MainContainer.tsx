"use client";

import { useEffect, useState } from "react";
import ArticleList from "@/components/vulnerability-db/ArticleList";
import RealTimeTopic from "@/components/vulnerability-db/RealTimeTopic";
import Pagination from "@/components/vulnerability-db/Pagination";
import { ArticleDataList, TArticleListItem } from "./dummydata";
import { useVulnerabilityStore } from "@/store/useVulnerabilityStore";
import { useHotNewStore } from "@/store/useHotNewState";

/**
 * @description `TListData`는 리스트 데이터와 전체 길이를 포함하는 타입입니다.
 *
 * @typedef {Object} TListData
 * @property {TArticleListItem[]} data - 현재 페이지에 표시될 기사 목록 데이터.
 * @property {number} length - 전체 기사 목록의 길이.
 */

type TListData = {
  data: TArticleListItem[];
  length: number;
};

function MainContainer(): JSX.Element {
  const { data } = useVulnerabilityStore();
  const { isHot, isNew } = useHotNewStore();

  // 배열을 복사한 후 정렬
  const hotSortData = [...data].sort((a, b) => b.view - a.view);
  const newSortData = [...data].sort((a, b) => b.subtitle - a.subtitle);

  // 현재 페이지와 한 페이지당 보여줄 데이터 수 설정
  const [page, setPage] = useState(1);
  const perPage = 5;

  // 상태에 따라 보여줄 데이터를 결정 (isHot, isNew에 따라)
  const currentData = isHot ? hotSortData : newSortData;

  // 총 페이지 수 계산
  const totalPage = Math.ceil(currentData.length / perPage);

  // 현재 페이지에 맞는 데이터를 슬라이싱하여 보여줍니다.
  const paginatedData = currentData.slice((page - 1) * perPage, page * perPage);

  useEffect(() => {
    // 페이지 변경 시마다 작동
    setPage(1); // isHot 또는 isNew 상태가 변경될 때 첫 페이지로 돌아가도록 설정
  }, [isHot, isNew]);

  return (
    <>
      <div className="flex h-[1350px] justify-between">
        <ArticleList listData={paginatedData} />
        <RealTimeTopic />
      </div>
      <Pagination
        page={page}
        setPage={setPage}
        limit={perPage}
        totalPage={totalPage}
      />
    </>
  );
}

export default MainContainer;
